EVALUACIÓN FINAL INTEGRADORA – SISTEMA DE GESTIÓN DE AEROLÍNEA (Parte 2)
Objetivo
Extender el sistema desarrollado en la Parte 1 para exponer sus funcionalidades mediante una API REST utilizando Django Rest Framework (DRF).
 El objetivo es que la aerolínea pueda ofrecer acceso a terceros (por ejemplo, aplicaciones móviles o portales externos) de forma segura, documentada y consistente.

Trabajo en Grupos
Los grupos no podrán superar los 3 integrantes.
Cada miembro debe haber realizado al menos 1 commit en el repositorio de GitHub.
Se debe continuar trabajando sobre el repositorio utilizado en la Parte 1.

Requisitos Técnicos
Implementar Django Rest Framework (DRF).
Seguir el patrón Service – Repository ya utilizado en la Parte 1.
Incorporar serializers para transformar los modelos en JSON.
Crear vistas API con ViewSets o APIView.
Configurar urls para exponer los endpoints.
Documentar la API (puede ser con Swagger o DRF-YASG). Lo veremos en la clase de mañana
Manejar autenticación (Token o JWT).
Manejar permisos y roles de usuarios en los endpoints.






Funcionalidades Obligatorias
Gestión de Vuelos (API)
Listar todos los vuelos disponibles.
Obtener detalle de un vuelo.
Filtrar vuelos por origen, destino y fecha.
Crear, editar y eliminar vuelos (solo administradores).


Gestión de Pasajeros (API)
Registrar un pasajero. 
Consultar información de un pasajero.
Listar reservas asociadas a un pasajero.


Sistema de Reservas (API)
Crear una reserva para un pasajero en un vuelo.
Seleccionar asiento disponible.
Cambiar estado de una reserva (confirmar, cancelar).


Gestión de Aviones y Asientos (API)
Listar aviones registrados.
Obtener layout de asientos de un avión.
Verificar disponibilidad de un asiento en un vuelo.


Boletos (API)
Generar boleto a partir de una reserva confirmada.
Consultar información de un boleto por código.


Reportes (API)
Endpoint para obtener listado de pasajeros por vuelo.
Endpoint para obtener reservas activas de un pasajero.



Consideraciones
Implementar validaciones en serializers y services.
Manejar errores con respuestas HTTP adecuadas (400, 401, 404, 500).
Agregar tests de endpoints (Opcional).
Respetar principios REST y buenas prácticas.
Código documentado y limpio.



Entrega
Código fuente completo en el mismo repositorio de la Parte 1.
Documentación de la API (Swagger, Postman Collection o README detallado).
Base de datos lista para pruebas.
Tests unitarios de endpoints (Opcional).
Fecha de entrega maxima 6/11